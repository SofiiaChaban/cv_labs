# -*- coding: utf-8 -*-
"""cv_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u62fUknNcc4adFOt-3S0YP-nA91Ej7aE
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np
import imutils

orb = cv2.ORB_create()
bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

orig_img = cv2.imread("exmpl.jpeg")
part = cv2.imread("part.jpg")

color_orig_img = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)
color_rot = imutils.rotate(color_orig_img, angle=45)
part_img = cv2.cvtColor(part, cv2.COLOR_BGR2RGB)

gray_orig_img = cv2.cvtColor(color_orig_img, cv2.COLOR_RGB2GRAY)
gray_rot = imutils.rotate(gray_orig_img, angle=90)

def cv_bf_matcher(kp1, kp2, des1, des2, img1, img2):
  matches = bf.match(des1,des2)
  matches = sorted(matches, key = lambda x:x.distance)
  img = cv2.drawMatches(img1,kp1,img2,kp2,matches[:10],None,flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
  return img

def custom_matcher(kp1, kp2, des1, des2, img1, img2):
    matches = []
    for i in range(len(des1)):
        for j in range(len(des2)):
            dist = np.linalg.norm(des1[i] - des2[j])
            matches.append(cv2.DMatch(_distance=dist, _imgIdx=0, _queryIdx=i, _trainIdx=j))

    matches = sorted(matches, key=lambda x: x.distance)[:10]

    img = cv2.drawMatches(img1, kp1, img2, kp2, matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    return img

# find the keypoints and descriptors with ORB
kp1, des1 = orb.detectAndCompute(color_orig_img,None)
kp2, des2 = orb.detectAndCompute(color_rot,None)
img_cv_matches = cv_bf_matcher(kp1, kp2, des1, des2, color_orig_img, color_rot)
plt.figure(figsize = (50,80))
plt.imshow(img_cv_matches, interpolation='nearest')

img_custom_matches = custom_matcher(kp1, kp2, des1, des2, color_orig_img, color_rot)
plt.figure(figsize = (50,80))
plt.imshow(img_custom_matches, interpolation='nearest')

kp1, des1 = orb.detectAndCompute(gray_orig_img,None)
kp2, des2 = orb.detectAndCompute(gray_rot,None)
img_cv_matches_gray = cv_bf_matcher(kp1, kp2, des1, des2, gray_orig_img, gray_rot)
plt.figure(figsize = (50,80))
plt.imshow(img_cv_matches_gray, interpolation='nearest')

img_custom_matches_gray = custom_matcher(kp1, kp2, des1, des2, gray_orig_img, gray_rot)
plt.figure(figsize = (50,80))
plt.imshow(img_custom_matches_gray, interpolation='nearest')

kp1, des1 = orb.detectAndCompute(color_orig_img,None)
kp2, des2 = orb.detectAndCompute(part_img,None)
img_cv_matches_part = cv_bf_matcher(kp1, kp2, des1, des2, color_orig_img, part_img)
plt.figure(figsize = (50,80))
plt.imshow(img_cv_matches_part, interpolation='nearest')

img_custom_matches_part = custom_matcher(kp1, kp2, des1, des2, color_orig_img, part_img)
plt.figure(figsize = (50,80))
plt.imshow(img_custom_matches_part, interpolation='nearest')